// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████
//                         ProfitWave™ Crystal Ball Omni-Trending Strategy 2025 © Tim Rice
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████
//                                    Big Wave Wealth Vision™ Version 1.0.1 ALPHA V2
//                                                     💰💰💰
//                   Use this indicator to plot trend changes from earlier timeframe. Time travel baby!!
//                                                     🔮🔮🔮
//
//                                  ╔══════════════════════════════════════════════╗
//                                  ║              COPYRIGHT © 2025                ║
//                                  ╚══════════════════════════════════════════════╝
//
//                                ████████╗██╗███╗░░░███╗  ██████╗░██╗░█████╗░███████╗™
//                                ╚══██╔══╝██║████╗░████║  ██╔══██╗██║██╔══██╗██╔════╝
//                                ░░░██║░░░██║██╔████╔██║  ██████╔╝██║██║░░╚═╝█████╗░░
//                                ░░░██║░░░██║██║╚██╔╝██║  ██╔══██╗██║██║░░██╗██╔══╝░░
//                                ░░░██║░░░██║██║░╚═╝░██║  ██║░░██║██║╚█████╔╝███████╗
//                                ░░░╚═╝░░░╚═╝╚═╝░░░░░╚═╝  ╚═╝░░╚═╝╚═╝░╚════╝░╚══════╝
//
//
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Copyright 2025 © Tim Rice

// This indicator plots SMA crossovers from multiple timeframes.
// Use the "Time Travel" option to anticipate crossovers one candle in advance.
// Note: "Time Travel" is experimental and may not be accurate due to repainting.
// Backtest with caution and consider out-of-sample testing or manual verification.
// Adjust input parameters to fine-tune the indicator for your trading style.

//@version=5
strategy("ProfitWave™ Crystal Ball X1", shorttitle="ProfitWave™ Strategy X1", overlay=true,
     pyramiding=0,  // Number of additional entries
     default_qty_type=strategy.percent_of_equity,  // Order size type
     default_qty_value=100,  // 100% of equity
     initial_capital=1000, // Initial Capital
     currency=currency.NONE,  //Base currency - Default is NONE which uses account currency
     commission_type=strategy.commission.percent, // Commission type
     commission_value=0.12, // Commission value (0.12%)
     slippage=2,  // Slippage in ticks
     margin_long=100,   // Margin for long positions
     margin_short=100,  // Margin for short positions
     calc_on_order_fills=true,  // Recalculate after order filled
     calc_on_every_tick=true,   // Recalculate on every tick
     process_orders_on_close=true, // Send orders on bar close
     backtest_fill_limits_assumption = 0 //Verify price for limit orders

     )



// === 📅 DATE RANGE WIZARDRY™ ===
fromTime = input.time(timestamp("1 Jan 2025 00:00 +0000"), title="From Date 🚀", group="📅 Date Range Wizardry™", tooltip="Select the starting date for backtesting.")
toTime   = input.time(timestamp("1 Jan 2027 00:00 +0000"), title="To Date 🚀",   group="📅 Date Range Wizardry™", tooltip="Select the ending date for backtesting.")

// === ⚙️ MASTER CONTROL PANEL™ ===
useRes      = input.bool(true, title="Engage Hyper-Resolution Mode? 🚀", group="⚙️ Master Control Panel™", tooltip="Use a higher timeframe for trend analysis.")

// --- Timeframe Dropdown ---
higherTimeframe = input.string("240", title="Time Warp Target ⏳", options=["1", "5", "10", "15", "30", "45", "60", "240"], group="⚙️ Master Control Panel™", tooltip="Select the higher timeframe for trend analysis.")

stratRes = timeframe.ismonthly ? str.tostring(timeframe.multiplier) + "M" :
             timeframe.isweekly ? str.tostring(timeframe.multiplier) + "W" :
             timeframe.isdaily ? str.tostring(timeframe.multiplier) + "D" :
             higherTimeframe

basisType   = input.string("SMMA", title="🔮 Select Your Moving Average Magic:", options=["SMA", "EMA", "DEMA", "TEMA", "WMA", "VWMA", "SMMA", "HullMA", "LSMA", "ALMA", "SSMA", "TMA"], group="⚙️ Master Control Panel™", tooltip="Choose the type of moving average.")
basisLen    = input.int(8, title="🧙 MA Period Length", minval=1, group="⚙️ Master Control Panel™", tooltip="Set the length of the moving average.")
offsetSigma = input.int(6, title="✨ LSMA/ALMA Offset/Sigma", minval=0, group="⚙️ Master Control Panel™", tooltip="Offset for LSMA or Sigma for ALMA.")
offsetALMA  = input.float(0.85, title="🌌 ALMA Offset", minval=0, step=0.01, group="⚙️ Master Control Panel™", tooltip="Offset for ALMA.")
scolor      = input.bool(false, title="🎨 Activate Technicolor Trend Bars?", group="⚙️ Master Control Panel™", tooltip="Show colored bars based on trend direction.")
delayOffset = input.int(0, title="⏪ Time Shift (Anti-Repainting)", minval=0, step=1, group="⚙️ Master Control Panel™", tooltip="Delay the moving averages to avoid repainting.")
tradeType   = input.string("BOTH", title="🎯 Trading Mode:", options=["LONG", "SHORT", "BOTH", "NONE"], group="⚙️ Master Control Panel™", tooltip="Select which types of trades to take.")


// === 📚 SECRET TRADING SCROLLS™ ===
showInstructions = input.bool(false, title="📖 Reveal the Secret Trading Scrolls™", group="📚 Secret Trading Scrolls™", tooltip="Display instructions on the chart.")
showPerformance = input.bool(false, title="📊 Show Performance Dashboard", group="📚 Secret Trading Scrolls™", tooltip="Display backtesting results on the chart.")


// === BASE FUNCTIONS ===
variant(type, src, len, offSig, offALMA) =>
    float ma = na
    if type == "EMA"
        ma := ta.ema(src, len)
    else if type == "DEMA"
        ma := ta.ema(ta.ema(src, len), len) * 2 - ta.ema(ta.ema(ta.ema(src, len), len), len)
    else if type == "TEMA"
        ma := 3 * (ta.ema(src, len) - ta.ema(ta.ema(src, len), len)) + ta.ema(ta.ema(ta.ema(src, len), len), len)
    else if type == "WMA"
        ma := ta.wma(src, len)
    else if type == "VWMA"
        ma := ta.vwma(src, len)
    else if type == "SMMA"
        ma := ta.sma(src, len)
    else if type == "HullMA"
        ma := ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))
    else if type == "LSMA"
        ma := ta.linreg(src, len, offSig)
    else if type == "ALMA"
        ma := ta.alma(src, len, offALMA, offSig)
    else if type == "TMA"
        ma := ta.sma(ta.sma(src, len), len)
    else
        ma := ta.sma(src, len)
    ma

// Security wrapper
reso(exp, use, res) => use ? request.security(syminfo.tickerid, res, exp, lookahead=barmerge.lookahead_on) : exp

// === SERIES SETUP ===
closeSeries = variant(basisType, close[delayOffset], basisLen, offsetSigma, offsetALMA)
openSeries  = variant(basisType, open[delayOffset], basisLen, offsetSigma, offsetALMA)

// Alternate resolution series
closeSeriesAlt = reso(closeSeries, useRes, stratRes)
openSeriesAlt  = reso(openSeries, useRes, stratRes)

// --- Crossover/Crossunder Detection (CRITICAL FIX) ---
var bool crossedOver = false
var bool crossedUnder = false
crossedOver := ta.crossover(closeSeriesAlt, openSeriesAlt)
crossedUnder := ta.crossunder(closeSeriesAlt, openSeriesAlt)

// Trend Colors
// Use color.from_gradient for the gradient effect
trendColour = closeSeriesAlt > openSeriesAlt ? color.green : color.red
bcolour     = closeSeries > openSeriesAlt ? color.lime : color.red
barcolor(scolor ? bcolour : na, title="Bar Colours")


// === PLOTS WITH GRADIENT ===
// Function to create gradient colors
gradientColor(baseColor, brightness) =>
    color gradient = na
    if baseColor == color.green
        gradient := color.from_gradient(brightness, 0, 100, color.rgb(0, 100, 0), color.rgb(0, 255, 0))  // Dark to Bright Green
    else if baseColor == color.red
        gradient := color.from_gradient(brightness, 0, 100, color.rgb(100, 0, 0), color.rgb(255, 0, 0))  // Dark to Bright Red
    gradient

// Calculate brightness (using the pre-calculated crossover/crossunder variables)
brightness = ta.barssince(crossedOver or crossedUnder)
brightness := math.min(brightness, 100) // Limit brightness to 100

closeP = plot(closeSeriesAlt, title="Close Series", color=gradientColor(trendColour, brightness), linewidth=2, style=plot.style_line)
openP  = plot(openSeriesAlt, title="Open Series", color=gradientColor(trendColour, brightness), linewidth=2, style=plot.style_line)
fill(closeP, openP, color=gradientColor(trendColour, brightness))


// === ADX FILTER ===
// ADX Calculation
// Input parameters
adxLength = input.int(14, title="ADX Length", minval=1)
adxfilter = input.int(13, title="ADX filter", minval=1)
// Calculate +DM and -DM (Directional Movement)
plusDM = math.max(high - high[1], 0)
minusDM = math.max(low[1] - low, 0)

// Remove cases where both are positive, and declare/initialize
float plusDM_val = na
plusDM_val := plusDM > minusDM ? plusDM : 0
float minusDM_val = na
minusDM_val := minusDM > plusDM ? minusDM : 0


// Smooth the directional movement using RMA
smoothedPlusDM = ta.rma(plusDM_val, adxLength)
smoothedMinusDM = ta.rma(minusDM_val, adxLength)

// Calculate True Range and smooth it
tr = ta.atr(adxLength)
smoothedTR = ta.rma(tr, adxLength)

// Compute +DI and -DI
plusDI = (smoothedPlusDM / smoothedTR) * 100
minusDI = (smoothedMinusDM / smoothedTR) * 100

// Compute DX (Directional Index)
dx = math.abs(plusDI - minusDI) / (plusDI + minusDI) * 100

// Compute ADX by smoothing DX
adx = ta.rma(dx, adxLength)

// === UPDATED TRADE CONDITIONS ===
// --- Entry Conditions (depend on tradeType) ---
longCond  = crossedOver and adx > adxfilter and tradeType != "SHORT"
shortCond = crossedUnder and adx > adxfilter and tradeType != "LONG"

// --- Exit Conditions (always based on opposing signal) ---
exitLongCond = crossedUnder  // Exit long on crossunder
exitShortCond = crossedOver   // Exit short on crossover


// === STRATEGY ===
slPoints  = input.float(0, title="Initial Stop Loss Points", minval=0)
tpPoints  = input.float(0, title="Initial Target Profit Points", minval=0)
ebar      = input.int(10000, title="Number of Bars for Back Testing", minval=0)

tdays     = (timenow - time) / 60000.0

float tdays_calc = na //Declare and initialize tdays
tdays_calc := timeframe.ismonthly ? tdays / 1440.0 / 5.0 / 4.3 / timeframe.multiplier :
             timeframe.isweekly ? tdays / 1440.0 / 5.0 / timeframe.multiplier :
             timeframe.isdaily ? tdays / 1440.0 / timeframe.multiplier :
             tdays / timeframe.multiplier

TP = tpPoints > 0 ? tpPoints : na
SL = slPoints > 0 ? slPoints : na

// === DATE RANGE CHECK (Simplified) ===
timeInRange = time >= fromTime and time <= toTime

// === Visual Settings and Signal Labels ===
visual_settings = "Visual Settings"  // Group name for inputs
bullcolor = input.color(color.rgb(149, 255, 0), "Bullish Color", group=visual_settings)
bearcolor = input.color(color.rgb(80, 11, 253), "Bearish Color", group=visual_settings)
showsignals = input.bool(true, title="Show Signals", group=visual_settings)

// Determine label level (for better positioning)
//labelLevel = high + ta.atr(14)  // Example: Place above high, adjust as needed //REMOVED

if (ebar == 0 or tdays_calc <= ebar) and timeInRange
    // --- Entries ---
    if longCond
        strategy.entry("long", strategy.long)
        if showsignals
            label.new(bar_index, high, "⬆BUY⬆",  // Place at high
                 color=bullcolor,
                 textcolor=color.black,
                 style=label.style_label_down)  // Point down to the candle
    if shortCond
        strategy.entry("short", strategy.short)
        if showsignals
            label.new(bar_index, low, "⬇Sell⬇",  // Place at low
                 color=bearcolor,
                 textcolor=color.white,
                 style=label.style_label_up)    // Point up to the candle

    // --- Exits (always close based on opposite signal) ---
    if exitLongCond
        strategy.close("long")  // Close long positions on crossunder
        if showsignals and strategy.position_size > 0  // Only show exit label if in a long position
            label.new(bar_index, low, "⬇Sell⬇",  //Place at low
                 color=bearcolor,
                 textcolor=color.white,
                 style=label.style_label_up)   // Point up to candle
    if exitShortCond
        strategy.close("short")
        if showsignals and strategy.position_size < 0  // Only show exit label if in a short position
            label.new(bar_index, high, "⬆BUY⬆", // Place at high
                 color=bullcolor,
                 textcolor=color.black,
                 style=label.style_label_down) // Point down to candle

// === PERFORMANCE DASHBOARD ===
if showPerformance
    // Format date range
    fromDateStr = str.format("{0,date,long}", fromTime)
    toDateStr   = str.format("{0,date,long}", toTime)

    // Basic performance metrics (add more as needed)
    netProfit = strategy.netprofit
    winRate = strategy.wintrades / strategy.closedtrades * 100
    maxDrawdown = strategy.max_drawdown

    // Create the label text (one-line version)
    labelText = "Performance Dashboard 📊\n------------------------\nDate Range: " + fromDateStr + " - " + toDateStr + "\nMA Type: " + basisType + "\nMA Period: " + str.tostring(basisLen) + "\nTime Warp: " + (useRes ? "Engaged (" + higherTimeframe + ")" : "Disengaged") + "\n------------------------\nNet Profit: " + str.tostring(netProfit, "0.00") + "\nWin Rate: " + str.tostring(winRate, "0.00") + "%\nMax Drawdown: " + str.tostring(maxDrawdown, "0.00") + "%"

    // Display the label on the chart (top right)
    var label perfLabel = na
    if na(perfLabel)
        perfLabel := label.new(x=bar_index, y=high, text=labelText, color=color.navy, textcolor=color.white, style=label.style_label_down, size=size.small)
        label.set_xloc(perfLabel, x=bar_index, xloc=xloc.bar_index) // Ensure it stays with the last bar
    label.set_xy(perfLabel, x=bar_index, y=high)  //Update position on each bar.

// === INSTRUCTION BOX ===
if showInstructions
    instructionText = "ProfitWave™ Instructions:\n" +
                      "-------------------------\n" +
                      "1. Set Date Range.\n" +
                      "2. Choose MA Type & Period.\n" +
                      "3. Adjust Time Warp Factor.\n" +
                      "4. Optional: Enable Trend Colors.\n" +
                      "5. Set Trade Type (Long/Short/Both).\n" +
                      "6. Optional: Enable Time Shift.\n" +
                      "-------------------------\n" +
                      "Long Entry: Green Crossover + ADX Filter.\n" +
                      "Short Entry: Red Crossunder + ADX Filter."

    var label instrLabel = na
    if na(instrLabel)
        instrLabel := label.new(x=bar_index, y=low, text=instructionText, color=color.teal, textcolor=color.white, style=label.style_label_up, size=size.small)
        label.set_xloc(instrLabel, x=bar_index, xloc=xloc.bar_index)
    label.set_xy(instrLabel, x=bar_index, y=low)  //Update position on each bar.

// === END ===
