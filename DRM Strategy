
//@version=5
strategy("ProfitWaveâ„¢ DRM Dynamic RSI Momentum X1", shorttitle="ProfitWaveâ„¢ DRM X1", overlay=true,
     pyramiding=0,  // Number of additional entries
     default_qty_type=strategy.percent_of_equity,  // Order size type
     default_qty_value=100,  // 100% of equity
     initial_capital=1000, // Initial Capital
     currency=currency.NONE,  //Base currency - Default is NONE which uses account currency
     commission_type=strategy.commission.percent, // Commission type
     commission_value=0.12, // Commission value (0.12%)
     slippage=2,  // Slippage in ticks
     margin_long=100,   // Margin for long positions
     margin_short=100,  // Margin for short positions
     calc_on_order_fills=true,  // Recalculate after order filled
     calc_on_every_tick=true,   // Recalculate on every tick
     process_orders_on_close=true, // Send orders on bar close
     backtest_fill_limits_assumption = 0 //Verify price for limit orders

     )
// +++++++++++++++++++++
// ++      INPUT      ++ 
// +++++++++++++++++++++

// === ðŸ“… DATE RANGE WIZARDRYâ„¢ ===
fromTime = input.time(timestamp("1 Jan 2025 00:00 +0000"), title="From Date ðŸš€", group="ðŸ“… Date Range Wizardryâ„¢", tooltip="Select the starting date for backtesting.")
toTime   = input.time(timestamp("1 Jan 2027 00:00 +0000"), title="To Date ðŸš€",   group="ðŸ“… Date Range Wizardryâ„¢", tooltip="Select the ending date for backtesting.")


// Momentum
len = input.int(10, "Momentum Length", 1,      group = "Dynamic RSI Momentum")
src = input.source(close, "Source",   group = "Dynamic RSI Momentum")

min_rsi = input.int(20, "Min RSI", group = "Dynamic RSI Momentum")
max_rsi = input.int(50, "Max RSI", group = "Dynamic RSI Momentum")

upLvl = input.float(70, "OverBought", 0, 100, group = "Dynamic RSI Momentum")
dnLvl = input.float(30, "OverSold",   0, 100, group = "Dynamic RSI Momentum")

// +++++++++++++++++++++
// ++   CALCULATION   ++ 
// +++++++++++++++++++++

// RMA Function
rmaFun(src, len) =>
    sma   = ta.sma(src, len) 
	alpha = 1/len
	sum   = 0.0
	sum  := na(sum[1]) ? sma : alpha * src + (1 - alpha) * nz(sum[1])

// RSI Function 
rsiFun(src, len) =>     
    100 - 100 / (1 + rmaFun(src - src[1] > 0 ? src - src[1] : 0, len) / 
                     rmaFun(src[1] - src > 0 ? src[1] - src : 0, len))

// Momentum
momVal = src - src[len]

// Calculation Price vs Momentum
corr  = ta.correlation(src, momVal, len)
corr := corr > 1 or corr < -1 ? float(na) : corr

rsiLen = 0
rsiLen := int(min_rsi + nz(math.round((1 - corr) * (max_rsi-min_rsi) / 2, 0), 0))

rsiMom = rsiFun(src, rsiLen)


// +++++++++++++++++++++
// ++    STRATEGY     ++ 
// +++++++++++++++++++++

long  = ta.crossover(rsiMom, dnLvl)
short = ta.crossunder(rsiMom, upLvl) 

// === DATE RANGE CHECK (Simplified) ===
timeInRange = time >= fromTime and time <= toTime


// +++> Long <+++++
if (long and not na(rsiMom)) and timeInRange

    strategy.entry("Long", strategy.long)
// +++> Short <+++++
if short and not na(rsiMom)
    strategy.entry("Short", strategy.short)

// +++++++++++++++++++++
// ++      PLOT       ++ 
// +++++++++++++++++++++

plot(rsiMom, "Dynamic RSI Momentum", rsiMom < dnLvl ? color.green : rsiMom > upLvl ? color.red : color.yellow)

hline(50, "Mid Line", color.gray)

upperLine = hline(upLvl, "Upper Line", color.gray)
lowerLine = hline(dnLvl, "Lower Line", color.gray)
fill(upperLine, lowerLine, color.new(color.purple, 90), "Background Fill")

